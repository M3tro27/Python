Aktuální verze funguje následovně:
pro zapsání jednoho znaku je potřeba tří pixelů. Každý pixel se skládá ze tří RGB hodnot. Do prvních osmi jsou zapsány bity znaku. Pro 0 sudé číslo, pro 1 liché. Devátá hodnota je sudá pokud následuje další znak nebo lichá pokud je zpráva u konce.

Alternativní způsob (neimplementován):
Některé obrázky dnes obsahují čtyři hodnoty pro pixel. Jsou jimi RGBA, kde A je průhlednost. Běžný způsob A ignoruje. Bylo by tedy možné zapsat znak do dvou pixelů. Je také nutné upravit koncovou podmínku, nejspíše unikátním znakem nebo sekvencí.

Nejhorší částí pro programování je přístup k datům, do kterých je zapisováno. Doporučuji užití knihoven, ale chvíli trvá než člověk zjistí, jak fungují.

Pokud se rozhodneš v projektu pokračovat, zajisti, že již implementované myšlenky zůstanou funkční. Jinak můžeš upravovat existující kód dle libosti. A neboj se zanechat poznámky pro ostatní, ať už zde nebo ve svém kódu.

Poznámky k implementování pro konzoli:
Program by nefungoval s uživatelským vstupem skrze dialog, ale příkaz v příkazové řádce. Takové příkazy se dají používat opakovaně i v jiných programech (např. bash). Požadované hodnoty jsou předány pomocí flags a v programu je parser, který s nimi pracuje. Kromě názvů se dají předávat další agrumenty. Například první verze programu zapisovala od prvního pixelu dále, ale není důvod proč nezapisovat od pixelu (10, 24) a dále. Znalost pozice zprávy by poté sloužila jako druh hesla k dekódování. Pokud to implementuješ, nechej ostatním informaci, že při úpravě programu, může být potřeba upravit i tvůj parser (ať lze z příkazové řádky spouštět i novější verze).
