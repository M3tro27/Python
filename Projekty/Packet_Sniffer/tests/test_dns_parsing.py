import unittest
import sys

#sys.path.append('/.../packet_sniffer')
from parse_dns import *

        #bytesArr = b'\x32\x7a\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x04\x6c\x6f\x67\x78\x0a\x6f\x70\x74\x69\x6d\x69\x7a\x65\x6c\x79\x03\x63\x6f\x6d\x00\x00\x01\x00\x01'

class TestDnsParsing(unittest.TestCase):
    
    def test_decode_header(self):
        
       # hex_data = b'\x32\x7a\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00'
        hex_data = b'\x32\x7a\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x04\x6c\x6f\x67\x78\x0a\x6f\x70\x74\x69\x6d\x69\x7a\x65\x6c\x79\x03\x63\x6f\x6d\x00\x00\x01\x00\x01'
        result = decode_dns_message(hex_data)
        # self.assertEqual(result,[12922, False, 0, False, False, True, False, 0, 0, 1, 0, 0, 0])
        self.assertEqual(result,{})
    
    
    def test_decode_questions(self):
       # hex_data = b'\x32\x7a\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x04\x6c\x6f\x67\x78\x0a\x6f\x70\x74\x69\x6d\x69\x7a\x65\x6c\x79\x03\x63\x6f\x6d\x00\x00\x01\x00\x01'
        hex_data = b'\xea\xfc\x81\x80\x00\x01\x00\x02\x00\r\x00\x0b\x06vortex\x04data\tmicrosoft\x03com\x00\x00\x01\x00\x01\xc0\x0c\x00\x05\x00\x01\x00\x00\x0c\xc2\x00\'\x06asimov\x06vortex\x04data\x0etrafficmanager\x03net\x00\xc07\x00\x01\x00\x01\x00\x00\x00\x01\x00\x04(M\xe2\xfa\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x11\x01g\x0cgtld-servers\xc0Y\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01i\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01a\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01k\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01h\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01b\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01j\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01e\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01f\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01m\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01c\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01l\xc0|\xc0"\x00\x02\x00\x01\x00\x01\xc3\x16\x00\x04\x01d\xc0|\xc0\x97\x00\x01\x00\x01\x00\x00(S\x00\x04\xc0+\xac\x1e\xc0\xa7\x00\x01\x00\x01\x00\x01\xa72\x00\x04\xc0\x05\x06\x1e\xc0\xb7\x00\x01\x00\x01\x00\x00\x03\xba\x00\x04\xc04\xb2\x1e\xc0\xc7\x00\x01\x00\x01\x00\x01 \xde\x00\x04\xc06p\x1e\xc0\xd7\x00\x01\x00\x01\x00\x01\xa72\x00\x04\xc0!\x0e\x1e\xc0\xe7\x00\x01\x00\x01\x00\x00(S\x00\x04\xc00O\x1e\xc0\xf7\x00\x01\x00\x01\x00\x01\xa72\x00\x04\xc0\x0c^\x1e\xc1\x07\x00\x01\x00\x01\x00\x00(S\x00\x04\xc0#3\x1e\xc1\'\x00\x01\x00\x01\x00\x01\xa72\x00\x04\xc0\x1a\\\x1e\xc17\x00\x01\x00\x01\x00\x00(S\x00\x04\xc0)\xa2\x1e\xc1G\x00\x01\x00\x01\x00\x01\xa72\x00\x04\xc0\x1fP\x1e'
        result = decode_question_section(hex_data,12,1)
        self.assertEqual(result,([{'domain_name': [b'logx', b'optimizely', b'com'], 'query_type': 1, 'query_class': 1}], 37))
    
   
    def test_decode_labels(self):
        hex_data = b'\x32\x7a\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x04\x6c\x6f\x67\x78\x0a\x6f\x70\x74\x69\x6d\x69\x7a\x65\x6c\x79\x03\x63\x6f\x6d\x00\x00\x01\x00\x01'
        
        result = decode_labels(hex_data,12)
        self.assertEqual(result,([b'logx', b'optimizely', b'com'], 33))
        



if __name__ == '__main__':
    unittest.main()